#!/bin/bash
# Delete all 

if [[ x$DEBUG != x ]]; then
    PS4='$LINENO: '
    set -x
fi

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source $SCRIPT_DIR/cross-platform-utils.bashlib
source $SCRIPT_DIR/easyoptions.sh
DRY_RUN=1

##  Usage: @script.name [--doit] <[--local] | --remote <remote>> [--branches-to-skip <branches to skip>]
## 
##  Example: git-delete-merged --doit origin deploy-branch,demo
## 
##  By default, "master" and "develop" are skipped
##  Specifying core.protected-branches in your git config, or
##  listing them on the command line with commas will override this
## 
##  Options:
##      -d, --doit              Execute the plan. 
##      -l, --local             Operate on local branches
##      --remote=my-remote      Operate on remote branches on the remote repo
##      --skip=branches         The list of branches to skip. Default is "master,develop"

skipped(){
    default='master,develop'
    override="$(git config --get core.protected-branches)"

    # command line args trumps git config
    if [[ -n $skip ]]; then
        override=$skip
    fi

    if [[ x$override != x ]]; then
        echo "$override" 
    else 
        echo "$default"
    fi
}

print-branches(){
    for b in $@; do
        echo "   $b"
    done
}

main(){
    if [[ -n $doit ]];then
        DRY_RUN=0
    fi

    no_branches_msg="No branches to delete"
    delete_branches_msg="Deleting the following branches"

    if [[ -n $local ]];then
        branches=$(
                    git branch --merged \
                    | util.esed -n 's/..(.*)/\1/p' \
                    | egrep -v \
                        "$(skipped $skip | util.esed -e 's/,/|/g' -e 's/(\w+)/^\1$/g' )" \
                    | paste -s
                )

    else 
        branches=$(
                    git branch -r --merged \
                    | grep "  $remote"  \
                    | egrep -v "HEAD ->"  \
                    | util.esed -n 's/  \w*\/(.*)/\1/p' \
                    | egrep -v \
                        "$(skipped $skip | util.esed -e 's/,/|/g' -e 's/(\w+)/^\1$/g' )" \
                    | paste -s
                )
        no_branches_msg="${no_branches_msg} on ${remote}"
        delete_branches_msg="${delete_branches_msg} on ${remote}"
    fi


    if [[ x$branches == x ]];then
        echo $no_branches_msg
        exit 1
    fi

    if [[ x$DRY_RUN == x1 ]]; then
        echo "NOT DELETING any branches. Pass --doit to go through with action."
        echo
        echo "Would have deleted the following branches:"
        print-branches $branches
        echo
        echo "Would have skipped these branches: "
        print-branches $(skipped $skip | tr ',' ' ')
    else
        echo "$delete_branches_msg"
        print-branches $branches
        echo
        echo "Pausing for 2 seconds ... Press Ctrl-C to quit"
        sleep 2

        if [[ -n $local ]];then
            git branch -d $branches
        else 
            git push --no-verify --delete $1 $branches
        fi
    fi
}

usage(){
    $0 --help 
    exit 1
}

if [[ -n $local && -n $remote ]]; then
    /bin/echo -e "\n ERROR: Can\'t specify both remote and local options!\n"
    usage
fi

if [[ ! -n $local && ! -n $remote ]]; then
    /bin/echo -e "\n ERROR: Need to specify either remote or local option!\n"
    usage
fi

if [[ -n $local || -n $remote ]]; then
    main "$@"
else
    usage
fi

# vim: set ft=sh
